#!/usr/bin/env node

//
// $ node hbs public/pages.hbs ~/tmp/course/course.xml
//

// Path to the .hbs template file
const path = process.argv[2];

// Path to the course.xml file
const coursexml = process.argv[3];
// console.log('coursexml', coursexml)

let unitsfilter = process.argv[4];
// console.log('jobdata', jobdata)
try {
  unitsfilter = unitsfilter.split(',')
  debugger;
} catch(err) {
  unitsfilter = []
}
console.error('unitsfilter', unitsfilter)

var hbs = require("handlebars");
var fs = require('fs');

const xmlcourse2json = require('./xmlcourse2json.js')

async function main() {
  //hbs.registerPartial("layout", fs.readFileSync('./layout.hbs', 'utf8'));

  var templateFile = fs.readFileSync(path, 'utf8');
  var template = hbs.compile( templateFile );

  const courses = await xmlcourse2json(coursexml)
  // console.log(courses);

  const lessons = [];
  courses.course.chapter.forEach(chapter => {
    const chap = {
      name: chapter.name,
      lessons: []
    }
    lessons.push(chap)

    chapter.sequential.forEach(seq => {
      seq.vertical.forEach(vert => {
        let file = vert.html[0] && vert.html[0].file;   // "module-1/week-1/js-intro.md"
        if (!file) return;

        let name = vert.name;
        let id = vert.id

        if (
          file && fs.existsSync(file) &&
          !unitsfilter.includes(id)
        ) {
          chap.lessons.push({
            id: file,
            title: name,
            content: fs.readFileSync(file, 'utf8')
          })
        }
      })
      
    })
  });
  // console.log(JSON.stringify(lessons, null, 4));

  var html = template({
    lessons
  });
  console.log(html);
}

main().catch(console.error)